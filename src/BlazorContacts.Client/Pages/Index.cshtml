@page "/"
@using BlazorContacts.Client.Services
@inject ContactsClientService contactsService
@inject ModalService modalService
@using BlazorContacts.Shared.Models
@using BlazorStrap

<div class="contactModel">
    <div class="col-md-6">
        <h1>Contacts</h1>
    </div>
</div>

<div class="contactModel">
    <div class="col-md-6">
        <button class="btn btn-default" onclick="@Add">Add</button>
        <br />
        <br />
    </div>
</div>

@if (!loading)
{
    <div class="contactModel">
        <div class="col-md-12">
            <table class="table table-stripped">
                <thead>
                    <tr>
                        <th>
                            Is Favorite
                        </th>
                        <th>Name</th>
                        <th>City</th>
                        <th>Phone number</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var contactModel in contacts)
                    {
                        <tr>
                            <td>
                               <FavoriteToggle isFavoriteInitialState="@contactModel.IsFavorite" contactId="@contactModel.Id"></FavoriteToggle>
                            </td>
                            @if (editingModel?.Id == contactModel.Id)
                            {
                                <td>
                                    <input bind="@editingModel.Name" />
                                </td>
                                <td>
                                    <input bind="@editingModel.City" />
                                </td>
                                <td>
                                    <input bind="@editingModel.PhoneNumber" />
                                </td>
                                <td>
                                    <span class="oi oi-check active" title="save" onclick="@(async () => await EditSave())"></span>

                                    <span style="margin-left: 20px" class="oi oi-x active" title="cancel" onclick="@(() => EditCancel())"></span>
                                </td>
                            }
                            else
                            {
                                <td>@contactModel.Name</td>
                                <td>@contactModel.City</td>
                                <td>@contactModel.PhoneNumber</td>

                                <td>
                                    <i class="oi oi-pencil active" title="Edit" onclick="@(() => Edit(contactModel))"></i>

                                    <i style="margin-left: 20px" class="oi oi-trash active" title="Delete" onclick="@(() => DeleteContact(contactModel))"></i>

                                    <a style="margin-left: 20px" href="/contacts/@contactModel.Id" title="edit">
                                        <i class="oi oi-eye active" title="View"></i>
                                    </a>
                                </td>
                            }
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
    
}
else
{
    <div>loading...</div>
}

<Modal IsOpen="@deleteModalIsOpen">
    <ModalHeader OnClick="@((e) => { deleteModalIsOpen = false; StateHasChanged(); })">Delete contact</ModalHeader>
    <ModalBody><p>Are you sure you want to delete contact "@deletingModel?.Name"?</p></ModalBody>
    <ModalFooter>
        <BlazorButton Color="Color.Warning" OnClick="@(async (e) => await ConfirmDelete())">Delete</BlazorButton>
        <BlazorButton Color="Color.Secondary" OnClick="@((e) => { deleteModalIsOpen = false; StateHasChanged(); })">Close</BlazorButton>
    </ModalFooter>
</Modal>

<Modal IsOpen="@addModalIsOpen">
    <ModalHeader OnClick="@((e) => { addModalIsOpen = false; StateHasChanged(); })">Add contact</ModalHeader>
    <ModalBody>
        <div class="form-group">
            <label for="addName">Name</label>
            <input type="text" class="form-control" id="addName" bind="@addModel.Name" />
        </div>
        <div class="form-group">
            <label for="addPhone">Phone number</label>
            <input type="text" class="form-control" id="addPhone" bind="@addModel.PhoneNumber" />
        </div>
        <div class="form-group">
            <label for="addCity">City</label>
            <input type="text" class="form-control" id="addCity" bind="@addModel.City" />
        </div>
    </ModalBody>
    <ModalFooter>
        <BlazorButton Color="Color.Primary" OnClick="@(async (e) => await ConfirmAdd())">Add</BlazorButton>
        <BlazorButton Color="Color.Secondary" OnClick="@((e) => { addModalIsOpen = false; StateHasChanged(); })">Close</BlazorButton>
    </ModalFooter>
</Modal>

@functions {
    private List<ContactModel> contacts = new List<ContactModel>();
    private bool loading = true;

    protected override async Task OnInitAsync()
    {
        contacts = await contactsService.GetAllAsync();
        loading = false;
    }

    #region delete contact

    private ContactModel deletingModel = null;
    private bool deleteModalIsOpen = false;

    public void DeleteContact(ContactModel model)
    {
        deletingModel = model;
        deleteModalIsOpen = true;
    }

    public async Task ConfirmDelete()
    {
        if (deletingModel != null)
        {
            modalService.Hide("deleteModal");
            await contactsService.Delete(deletingModel.Id);
            contacts.Remove(deletingModel);
            NotifierService.Info("Contact deleted");
        }
        deleteModalIsOpen = false;
        StateHasChanged();
    }

    #endregion

    #region add contact

    private ContactModel addModel = new ContactModel();
    private bool addModalIsOpen = false;

    public void Add()
    {
        addModel = new ContactModel();
        addModalIsOpen = true;
    }

    public async Task ConfirmAdd()
    {
        if (string.IsNullOrWhiteSpace(addModel.City)
            || string.IsNullOrWhiteSpace(addModel.Name)
            || string.IsNullOrWhiteSpace(addModel.PhoneNumber))
        {
            NotifierService.Warning("All inputs are required.");
            return;
        }

        addModel.Id = Guid.NewGuid();
        await contactsService.Save(addModel);
        contacts.Add(addModel);
        addModel = new ContactModel();
        modalService.Hide("addModal");
        NotifierService.Info("Contact saved");
        addModalIsOpen = false;
        StateHasChanged();
    }

    #endregion

    #region edit contact

    private ContactModel editingModel = new ContactModel();

    public void Edit(ContactModel contact)
    {
        editingModel = new ContactModel(contact);
    }

    public void EditCancel()
    {
        editingModel = new ContactModel();
    }

    public async Task EditSave()
    {
        if (string.IsNullOrWhiteSpace(editingModel.Name)
            || string.IsNullOrWhiteSpace(editingModel.PhoneNumber)
            || string.IsNullOrWhiteSpace(editingModel.City)
            )
        {
            NotifierService.Warning("All inputs are required");
        }
        else
        {
            await contactsService.Save(editingModel);
            NotifierService.Info("Changes saved");
            var model = contacts.FirstOrDefault(x => x.Id == editingModel.Id);
            if (model != null)
            {
                model.Update(editingModel);
            }
            editingModel = new ContactModel();
        }
    }

    #endregion
}
